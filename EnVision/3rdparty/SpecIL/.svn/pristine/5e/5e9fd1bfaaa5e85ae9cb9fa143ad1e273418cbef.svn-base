#ifndef SPECIL_BASE_H
#define SPECIL_BASE_H

#include "SpecIL_Interface.h"

#include <string>
#include <vector>
#include <fstream>
#include <sstream>

class SpecIL_Base : public SpecIL_Interface
{
public:
	// Destruktor
	~SpecIL_Base();
	// Konstruktor
	SpecIL_Base();
	// Arbeitsprofil festlegen
	int setProfile(std::string profile);
	// Bild/Daten-Eigenschaften setzen:
	int setImageProperties(	const char* id,
							int width,
							int height,
							int planes,
							t_SpecHead::t_interleave il,
							t_SpecHead::t_data_type dt
							);
	//
	int setReadOnlyFromHDD();
	// Pointer auf den Header
	t_SpecHead* getHeaderPointer();
	// Ebene
	int getPlane(void* plane, int x, int y, int z);
	int setPlane(void* plane, int x, int y, int z);
	// Vektor
	int getVector(void* vector, int x, int y, int z);
	// Punkt
	int getPoint(void* point, int x, int y, int z);
	// Fileheader lesen
	int readFileHeader();

protected:
	t_SpecHead SpecHeader;					// Header, ueberwiegend im ENVI Format
	// ------------------------------------------------------------------------
	// Flags ( noch nicht schoen implementiert. Am liebsten in einen Datentyp rein
	// und nur das eine Bit pruefen)
	//
	int FileHeaderLoaded;					// Status Fileheaderinformationen
											//		0 - not loaded
											//		1 - loaded
	int FileDataLoaded;						// Status Bildaten
											//		0 - not loaded
											//		1 - loaded into RAM
	int ProfileLoaded;						// Status Profil
											//		0 - not loaded
											//		1 - loaded
	int ReadOnlyFromHDD;					//
											//		0 - use HDD and RAM
											//		1 - read only from HDD
	// ------------------------------------------------------------------------
	// Interne Variablen fuer die Verarbeitung und I-O-Operationen
	int OutputProfile;						//	Ausgabeprofil der Daten
											//		0 - Standard
											//		1 - C-Workflow
	unsigned int SelectedImgProperties;		// Verwendete Bildeigenschaften
											// 0 - Header
											// 1 - Meta-File
											// 2 - Manuelle Eingabe (setImageProperties)
	int cubemaxsize;						// Maximal erlaubte Groesse des Daten-Cubes
											// im Arbeitsspeicher!
	// ------------------------------------------------------------------------
	// ------------------------------------------------------------------------

	// Initialisierung mit Standardwerten
	int init();

	// Laed das gesetzte Profil
	int loadProfile();

	// ENVI Header Datei ".hdr" einlesen 
	// und Informationen in SpecIL_Base::SpecHeader speichern
	int readENVIhdr();

	// Datei oeffnen und Bilddaten (wenn moeglich bei ausreichend RAM)
	// einlesen
	int readImageData();

	// ENVI Header Datei .hdr schreiben
	int writeENVIhdr(std::string outhdrfile);

	// Daten als HySpex Datei speichern
	int writeDataToHySpexFile(std::string outHySpexFile);

	// Daten als TGD Datei speichern
	int writeDataToTGDfile(std::string outTGDfile);

	// ------------------------------------------------------------------------
	// ------------------------------------------------------------------------

	// Standard Ausgabeprofil
	// Ebenen
	int getPlane_Band(void* plane, int x, int y, int z);
	int getPlane_Frame(void* plane, int x, int y, int z);
	int getPlane_Sample(void* plane, int x, int y, int z);

	int setPlane_Band(void* plane, int x, int y, int z);

	// Vektoren
	int getVector_X(void* vector, int y, int z);
	int getVector_Y(void* vector, int x, int z);
	int getVector_Z(void* vector, int x, int y);

	// ------------------------------------------------------------------------

	// Ausgabeprofil: C-Workflow (CWF)
	// Ebenen

	// Fuer den CWorkflow wird das Bild gedreht
	int getPlane_Band_CWF(void* plane, int x, int y, int z);

	// Diese Methoden drehen das Bild nicht, sonder die Bezeichnungen von x und y sind vertauscht
	// Siehe Nuance!
	// Im Cworkflow werden die Aufnahmen der Nuance Kamera nicht gedreht. Aber die Achsenbezeichnung getauscht x-y
	// Dementsprechend sehen Frame und Samplebild anders aus!
	// Das N vor CWF steht dabei fuer die Nuance Kamera aufnahme
	int getPlane_Frame_NCWF(void* plane, int x, int y, int z);// N fuer Nuance
	int getPlane_Sample_NCWF(void* plane, int x, int y, int z);// N fuer Nuance

	// Vektoren
	int getVector_NX(void* vector, int y, int z); // N fuer Nuance
	int getVector_NY(void* vector, int x, int z); // N fuer Nuance
	int getVector_NZ(void* vector, int x, int z); // N fuer Nuance

	// Punkt
	int getPoint_N(void* point, int x, int y, int z);
	// ------------------------------------------------------------------------

	// Error-Handling
	void ErrorMsgLog(std::string errmsg);

	// Speicher frei geben und aufraeumen
	int CleanMemory();
};
#endif // SpecIL_BASE_H